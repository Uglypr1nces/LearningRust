searchState.loadedDescShard("gstd", 2, "Same as <code>create_program_with_gas</code>, but the program will …\nSame as <code>create_program_with_gas</code>, but the program will …\nReturns the argument unchanged.\nReturn the salt needed to create a new program.\nCalls <code>U::from(self)</code>.\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nThe future returned by the <code>lock</code> method.\nLimit of readers for <code>RwLock</code>\nA reader-writer lock.\nThe future returned by the <code>read</code> method.\nRAII structure used to release the shared read access of a …\nThe future returned by the <code>write</code> method.\nRAII structure used to release the exclusive write access …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAcquire a mutex, protecting the subsequent code from …\nCreate a new mutex in an unlocked state ready for use.\nCreate a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nSets the maximum number of blocks the mutex lock can be …\nLocks this rwlock with shared read access, protecting the …\nLocks this rwlock with exclusive write access, blocking …\nA metatype abstraction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new meta type from the given compile-time known …\nGenerate a registry from given meta types and encode it to …\nConvert a given vector to a raw pointer and prevent its …\nConvert a given reference to a raw pointer.\nReturns the type identifier provided by <code>core::any</code>.\nReturns the meta type information.")