searchState.loadedDescShard("gprimitives", 0, "Gear primitive types.\nProgram (actor) identifier.\nCode identifier.\nThe error type returned when conversion fails.\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nInvalid hex string.\nInvalid slice length.\nInvalid SS58 address.\nThe largest value that can be represented by this non-zero\nMaximum value.\nThe smallest value that can be represented by this non-zero\nMessage handle.\nMessage identifier.\nA value that is known not to equal zero.\nReservation identifier.\nRepresents SS58 address.\nSS58 encoding failed.\nLittle-endian large integer type 256-bit unsigned integer.\nComputes the absolute difference between self and other.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns string slice containing SS58 address.\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn specific byte.\nAdds an unsigned integer to a non-zero value. Checks for …\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nMultiplies two non-zero integers together. Checks for …\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nRaises non-zero value to an integer power. Checks for …\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nConverts a string slice in a given base to an integer. …\nMultiplies two 256-bit integers to produce full 512-bit …\nReturns the contained value as a primitive type.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>ActorId</code>as bytes array.\nReturns <code>MessageId</code>as bytes array.\nReturns <code>CodeId</code>as bytes array.\nReturns <code>ReservationId</code>as bytes array.\nChecks whether <code>ActorId</code> is zero.\nChecks whether <code>MessageId</code> is zero.\nChecks whether <code>CodeId</code> is zero.\nChecks whether <code>ReservationId</code> is zero.\nWhether this is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns the number of leading zeros in the binary …\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nLow 2 words (u128)\nConversion to u32\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nCreates a non-zero if the given value is not zero.\nCreates a new <code>ActorId</code> from a 32-byte array.\nCreates a new <code>MessageId</code> from a 32-byte array.\nCreates a new <code>CodeId</code> from a 32-byte array.\nCreates a new <code>ReservationId</code> from a 32-byte array.\nCreates a non-zero without checking whether the value is …\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nRaise non-zero value to an integer power.\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nAdds an unsigned integer to a non-zero value.\nAddition which saturates at the maximum value (Self::MAX).\nMultiplies two non-zero integers together.\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at MIN.\nSubtraction which saturates at zero.\nReturns <code>H160</code> with possible loss of the first 12 bytes.\nWrite to the slice in big-endian format.\nReturns the inner bytes array.\nReturns the inner bytes array.\nWrite to the slice in little-endian format.\nReturns the ss58-check address with default ss58 version.\nReturns the ss58-check address with given ss58 version.\nReturns the number of trailing zeros in the binary …\nCreates a new zero <code>ActorId</code>.\nCreates a new zero <code>MessageId</code>.\nCreates a new zero <code>CodeId</code>.\nCreates a new zero <code>ReservationId</code>.\nZero (additive identity) of this type.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.")